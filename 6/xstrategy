#!/usr/bin/env python3.9
# TODO: make tests script that tests the strategy

import io, json, json_stream, re, sys
from json import JSONDecoder, JSONDecodeError

sys.path.insert(0, '../Q/Common')
sys.path.insert(0, '../Q/Player')
from json_io import Json_io
from public_game_state import PublicState
from strategy import Strategy
from turn import Turn
from player import Player

NOT_WHITESPACE = re.compile(r'\S')

def decode_stacked(document, pos=0, decoder=JSONDecoder()):
    while True:
        match = NOT_WHITESPACE.search(document, pos)
        if not match:
            return
        pos = match.start()
        
        try:
            obj, pos = decoder.raw_decode(document, pos)
        except JSONDecodeError:
            # do something sensible if there's some error
            raise
        yield obj

def main():

    # Convert string jstrategy and jpub into internal data
    # representations.
    json_input = decode_stacked(sys.stdin.read())
    json_objects = []
    for i in json_input:
        json_objects.append(i)
    jstrategy = json_objects[0]
    jpub = json_objects[1]

    jmap = Json_io.from_j_map(jpub['map'])

    jtile_num = jpub['tile*']
    ps = PublicState(jmap, jtile_num, {})
    jplayers = Json_io.from_j_players(jpub['players'])
    strategy = Strategy.dag if jstrategy == "dag" else Strategy.ldasg

    # Get the next turn recommended by the strategy.
    next_turn_type, next_turn_moves = Strategy.get_next_turn(ps, jplayers[0].tiles, strategy)

    # Print out the jaction depending on the turn received.
    jaction = None
    if next_turn_type == Turn.pass_turn:
        jaction = "pass"
    elif next_turn_type == Turn.exchange:
        jaction = "replace"
    else:
        first_piece, first_position = next_turn_moves[0]
        jaction = {"coordinate": {"row": first_position.row, "column": first_position.column}, "1tile": {"color": first_piece.color.name, "shape": first_piece.shape.name}}
    jaction = json.dumps(jaction)
    print(jaction, end="")

if __name__ == '__main__':
    main()