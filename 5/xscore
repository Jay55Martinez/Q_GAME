#!/usr/bin/env python3.9
from json import JSONDecoder, JSONDecodeError
import json_stream
import io
import re
import sys
sys.path.insert(0, "../Q/Common")
from public_game_state import *
sys.path.insert(0, "../Q/Player")
from player import *
from referee import *
sys.path.insert(0, "../Q/Common")
from game_state import *
from json_io import Json_io

def parse_jmap(jmap_obj):
    return Json_io.from_j_map(jmap_obj)

NOT_WHITESPACE = re.compile(r'\S')

def decode_stacked(document, pos=0, decoder=JSONDecoder()):
    while True:
        match = NOT_WHITESPACE.search(document, pos)
        if not match:
            return
        pos = match.start()
        
        try:
            obj, pos = decoder.raw_decode(document, pos)
        except JSONDecodeError:
            # do something sensible if there's some error
            raise
        yield obj

def main():
    
    
    json_in = decode_stacked(sys.stdin.read())
    inputs = []
    for obj in json_in:
        inputs.append(obj)
    
    jmap = inputs[0]
    jplacements = inputs[1]
    
    b = parse_jmap(jmap)

    placements = Json_io.from_j_placements(jplacements)
    
    locations = []
    
    for moves in placements:
        locations.append(moves[0])
    
    game = GameState(players=[Player(1, 13)])
    
    game.board = b

    print(game.score_move(locations), end="")

if __name__ == '__main__':
    main()